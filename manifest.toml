#:schema https://raw.githubusercontent.com/YunoHost/apps/master/schemas/manifest.v2.schema.json

packaging_format = 2

id = "nifi"
name = "NiFi"
description.en = "An easy to use, powerful, and reliable system to process and distribute data"
description.fr = "Un système facile à utiliser, puissant et fiable pour traiter et distribuer les données"

version = "1.25.0~ynh1"

maintainers = ["pbrisacier@mncc.fr"]

[upstream]
# NB: Only the "license" key is mandatory. Remove entries for which there's no relevant data
license = "apache-2.0" # you can see the available licenses identifiers list here: https://spdx.org/licenses/
website = "https://nifi.apache.org/"
admindoc = "https://nifi.apache.org/docs/nifi-docs/html/administration-guide.html"
userdoc = "https://nifi.apache.org/docs/nifi-docs/html/user-guide.html"
code = "https://github.com/apache/nifi"
cpe = "cpe:2.3:a:apache:nifi"

[integration]
yunohost = ">= 11.2"
# FIXME: can be replaced by a list of supported archs using the dpkg --print-architecture nomenclature (amd64/i386/armhf/arm64), for example: ["amd64", "i386"]
architectures = "all"
multi_instance = true

# FIXME: replace with true, false, or "not_relevant".
# Not to confuse with the "sso" key: the "ldap" key corresponds to wether or not a user *can* login on the app using
# its YunoHost credentials.
ldap = "?"

# FIXME: replace with true, false, or "not_relevant".
# Not to confuse with the "ldap" key: the "sso" key corresponds to wether or not a user is *automatically logged-in*
# on the app when logged-in on the YunoHost portal.
sso = "?"

# FIXME: replace with an **estimate** minimum disk and RAM requirements. e.g. 20M, 400M, 1G...
disk = "50M"
ram.build = "50M"
ram.runtime = "50M"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

    [install.path]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "path"
    default = "/my-nifi"

    [install.init_main_permission]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # This won't be saved as setting and will instead be used to initialize the SSOwat permission
    type = "group"
    default = "visitors"

    [install.admin]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "user"

[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those

    [resources.sources]

    [resources.sources.main]
    # This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
    #    ynh_setup_source --dest_dir="$install_dir"
    # You can also define other assets than "main" and add --source_id="foobar" in the previous command
    url = "https://dlcdn.apache.org/nifi/1.25.0/nifi-1.25.0-bin.zip"
    sha256 = "ce314ddbc1471fc8c2b670abe4091d853a2f12ba2cc13354c166b15f9d965684"

    [resources.sources.toolkit]
    url = "https://dlcdn.apache.org/nifi/1.25.0/nifi-toolkit-1.25.0-bin.zip"
    sha256 = "a9c519be4490ad6a442fff4f083e1e7a63f4b78895aff66a8b51316ae4c11d6d"

    [resources.system_user]
    # This will provision/deprovision a unix system user

    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir

    [resources.data_dir]
    # This will create/remove the data dir as /home/yunohost.app/$app
    # and store the corresponding setting $data_dir

    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"

    [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting

    #[resources.apt]
    # This will automatically install/uninstall the following apt packages
    # and implicitly define the $phpversion setting as 8.0 (if phpX.Y-foobar dependencies are listed)
    #packages = "mariadb-server, deb1, deb2, php8.0-foo, php8.0-bar"
